service: curtsy-users-service

plugins:
  - serverless-domain-manager
  - serverless-webpack

package:
  individually: true
    
custom:
  region: ${opt:region, self:provider.region}
  stage: ${opt:stage, self:provider.stage, 'dev'}
  emailQueue: curtsy-${self:custom.stage}-email-queue
  dynamodbTable: ${self:service}-${self:custom.stage}
  dynamodbGSI: userEmailIndex
  authorizerArn: ${ssm:/curtsy/${self:custom.stage}/authorizer-arn}
  jwtSecret: ${ssm:/curtsy/${self:custom.stage}/jwt-sercret, 'dummysecret'}
  clientUrl: ${ssm:/curtsy/${self:custom.stage}/client-url}
  senderEmail: ${ssm:/curtsy/${self:custom.stage}/sender-email}
  allowOrigin: ${ssm:/curtsy/${self:custom.stage}/allow-origin, '*'}
  accountId: ${ssm:/curtsy/account-id}

  customDomain:
    domainName: ${ssm:/curtsy/${self:custom.stage}/api-domain}
    basePath: 'users'
    stage: ${self:custom.stage}
    createRoute53Record: true

  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules:
      forceExclude:
        - aws-sdk
        - http-errors

provider:
    name: aws
    runtime: nodejs12.x
    region: eu-west-1
    environment:
      DYNAMODB_TABLE: ${self:custom.dynamodbTable}
      DYNAMODB_GSI_NAME: ${self:custom.dynamodbGSI}
      JWT_SECRET: ${self:custom.jwtSecret}
      CLIENT_URL: ${self:custom.clientUrl}
      SENDER_EMAIL: ${self:custom.senderEmail}
      ALLOW_ORIGIN: ${self:custom.allowOrigin}
      EMAIL_QUEUE_URL: https://sqs.eu-west-1.amazonaws.com/${aws:accountId}/${self:custom.emailQueue}

    deploymentBucket:
      name: curtsy-deployments-${self:provider.region}
      blockPublicAccess: true

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource: 
          - arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.dynamodbTable}
          - arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.dynamodbTable}/index/*

      - Effect: 'Allow'
        Action:
          - 'sqs:SendMessage'
          - "sqs:GetQueueUrl"
        Resource: 
          - arn:aws:sqs:${self:custom.region}:*:${self:custom.emailQueue}
      
      - Effect: Allow
        Action:
          - dynamodb:DescribeStream
          - dynamodb:GetRecords
          - dynamodb:GetShardIterator
          - dynamodb:ListStreams
        Resource: arn:aws:dynamodb:*:*:table/curtsy-teams-service

functions:
  login:
    handler: src/handlers/login.handler
    description: Logs in a user
    events:
      - http:
          path: login
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(src/schemas/login_request.json)}

  getSignupToken:
      handler: src/handlers/getSignupToken.handler
      description: Get a token that a user can use to sign up
      events:
        - http:
            path: signup-token
            method: post
            cors: true
            request:
              schemas:
                application/json: ${file(src/schemas/get_signup_token_request.json)}
  signup:
      handler: src/handlers/signup.handler
      description: Sign up a user
      events:
        - http:
            path: signup
            authorizer: ${ssm:/curtsy/${self:custom.stage}/signup-authorizer-arn}
            method: post
            cors: true
            request:
              schemas:
                application/json: ${file(src/schemas/signup_request.json)}

  getMe:
    handler: src/handlers/getMe.handler
    description: Gets the currently logged in user
    events:
      - http:
          path: me
          authorizer: ${ssm:/curtsy/${self:custom.stage}/user-authorizer-arn}
          method: get
          cors: true

  update:
      handler: src/handlers/update.handler
      description: Updates the currently logged in user
      events:
        - http:
            path: /
            authorizer: ${ssm:/curtsy/${self:custom.stage}/user-authorizer-arn}
            method: put
            cors: true
            request:
              schemas:
                application/json: ${file(src/schemas/update_request.json)}

  resetPassword:
      handler: src/handlers/resetPassword.handler
      description: Updates the currently logged in user's password
      events:
        - http:
            path: /reset-password
            authorizer: ${ssm:/curtsy/${self:custom.stage}/user-authorizer-arn}
            method: put
            cors: true
            request:
              schemas:
                application/json: ${file(src/schemas/reset_password_request.json)}

  forgotPassword:
      handler: src/handlers/forgotPassword.handler
      description: Triggers a forgot password email
      events:
        - http:
            path: /forgot-password
            method: post
            cors: true
            request:
              schemas:
                application/json: ${file(src/schemas/forgot_password_request.json)}

  getResetEmailCode:
      handler: src/handlers/getResetEmailCode.handler
      description: Triggers a reset email code password
      events:
        - http:
            path: /reset-email-code
            authorizer: ${ssm:/curtsy/${self:custom.stage}/user-authorizer-arn}
            method: post
            cors: true
            request:
              schemas:
                application/json: ${file(src/schemas/get_reset_email_code_request.json)}

  resetEmail:
      handler: src/handlers/resetEmail.handler
      description: Resets a user's email
      events:
        - http:
            path: /reset-email
            authorizer: ${ssm:/curtsy/${self:custom.stage}/user-authorizer-arn}
            method: put
            cors: true
            request:
              schemas:
                application/json: ${file(src/schemas/reset_email_request.json)}

  handleUpdatedTeams:
      handler: src/handlers/handleUpdatedTeams.handler
      description: Updates users when a team is created.
      events:
        - stream: arn:aws:dynamodb:eu-west-1:357843269944:table/curtsy-teams-service-dev/stream/2021-08-15T14:45:39.570
    
resources:
  Resources:
    dynamodb:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamodbTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.dynamodbGSI}
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection: 
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
